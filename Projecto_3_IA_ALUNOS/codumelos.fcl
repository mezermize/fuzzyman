// Block definition (there may be more than one block per file)
FUNCTION_BLOCK tipper

// Define input variables
VAR_INPUT
    distance : REAL;
    velocity : REAL;
    danger : REAL;
END_VAR

// Define output variable
VAR_OUTPUT
    action : REAL;
    rotation : REAL;
END_VAR

// Fuzzify input variable 'distance'
FUZZIFY distance
    TERM near := (0, 1) (1, 0.9) (2, 0.8) (3, 0.7) (4, 0.6) (5, 0.5) (6, 0.4) (7, 0.3) (8, 0.2) (9, 0.1) (10, 0); 
    TERM medium := (0, 0.5) (1, 0.6) (2, 0.7) (3, 0.8) (4, 0.9) (5, 1) (6, 0.9) (7, 0.8) (8, 0.7) (9, 0.6) (10, 0.5);
    TERM far := (0, 0) (1, 0.1) (2, 0.2) (3, 0.3) (4, 0.4) (5, 0.5) (6, 0.6) (7, 0.7) (8, 0.8) (9, 0.9) (10, 1);
END_FUZZIFY

// Fuzzify input variable 'velocity'
FUZZIFY velocity
    TERM slow := (0, 1) (1, 0.8) (2,0.6) (3, 0.4) (4,0.2) (5,0);
    TERM medium := (0, 0) (1, 0.8) (2,0.6) (3, 0.4) (4,0.2) (5,0);
    //TERM fast := (0, 0) (1, 0.2) (2,0.4) (3, 0.6) (4,0.8) (5,1);
    TERM fast := (0, 0) (5,1);
    
END_FUZZIFY

// Defzzzify input variable 'danger'
FUZZIFY danger
    TERM poisonous := (0,0) (5,1) (10,0);
    TERM none := (10,0) (15,1) (20,0);
    TERM edible := (20,0) (25,1) (30,0);
    
END_FUZZIFY

// Defzzzify output variable 'action'
DEFUZZIFY action
    TERM no_action := (0,0) (5,1) (10,0);
    TERM destroy := (10,0) (15,1) (20,0);
    TERM pick_up := (20,0) (25,1) (30,0);
    // Use 'Center Of Gravity' defuzzification method
    METHOD : COG;
    // Default value is 0 (if no rule activates defuzzifier)
    DEFAULT := 0;
END_DEFUZZIFY

// Defzzzify output variable 'rotation'
DEFUZZIFY rotation
    TERM strong_left := (0,0) (5,1) (10,0);
    TERM left := (10,0) (15,1) (20,0);
    TERM center:= (20,0) (25,1) (30,0);
    TERM right := (10,0) (15,1) (20,0);
    TERM strong_right := (0,0) (5,1) (10,0);
    // Use 'Center Of Gravity' defuzzification method
    METHOD : COG;
    // Default value is 0 (if no rule activates defuzzifier)
    DEFAULT := 0;
END_DEFUZZIFY

RULEBLOCK No1
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
    AND : MIN; //minimos se for Or faz os maximos
    // Use 'min' activation method
    ACT : MIN; // TRuncate
    // Use 'max' accumulation method
    ACCU : MAX;  // OR-Link

    RULE 1 : IF danger IS poisonous THEN action IS destroy;
    RULE 2 : IF danger IS edible THEN action IS pick_up; 
    RULE 3 : IF danger IS none THEN action IS no_action;
    
END_RULEBLOCK

END_FUNCTION_BLOCK
